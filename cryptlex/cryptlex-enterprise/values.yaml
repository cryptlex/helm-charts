# Default values for cryptlex-enterprise.

# Certmanager letsencrypt config
certmanager:
  enabled: false
  issuer:
    email: support@mycompany.com
    production: false

# Docker registry credentials
imageCredentials:
  registry: https://index.docker.io/v1/
  username:
  password:

# Ingress config
ingress:
  forceHttpsRedirect: true
  className: nginx
  internal: false
  enableStatusPath: true
  tlsSecurityPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
  hosts:
    webApiHost: api.cryptlex.com
    adminPortalHost: app.cryptlex.com
    customerPortalHost: "*.customer.cryptlex.com"
    resellerPortalHost: "*.reseller.cryptlex.com"
    releaseServerHost: releases.cryptlex.com
    dashboardHost: app-legacy.cryptlex.com

# Configure Cryptlex services
services:
  database:
    external: false
    storage: 10Gi
    storageClass:
    image:
      repository: postgres
      tag: 12.3-alpine
      pullPolicy: IfNotPresent
  geoip:
    external: false
    image:
      repository: cryptlex/freegeoip
      tag: 3.7.8
      pullPolicy: IfNotPresent
  filestore:
    enabled: true
    external: false
    storage: 10Gi
    storageClass:
    image:
      repository: minio/minio
      tag: RELEASE.2025-03-12T18-04-18Z
      pullPolicy: IfNotPresent
  rabbitMq:
    enabled: false
    delayedMessagePluginEnabled: false
    prefetchCount: 16
    external: false
    storage: 5Gi
    storageClass:
  dashboard:
    image:
      repository: cryptlex/cryptlex-web-dashboard
      tag: 3.45.13
      pullPolicy: IfNotPresent
  adminPortal:
    enabled: true
    image:
      repository: cryptlex/admin-portal
      tag: 5.4.5
      pullPolicy: IfNotPresent
    podSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: [ "ALL" ]
      readOnlyRootFilesystem: true
      runAsNonRoot: true
  customerPortal:
    enabled: true
    image:
      repository: cryptlex/customer-portal
      tag: 5.4.5
      pullPolicy: IfNotPresent
    podSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: [ "ALL" ]
      readOnlyRootFilesystem: true
      runAsNonRoot: true
  resellerPortal:
    enabled: true
    image:
      repository: cryptlex/reseller-portal
      tag: 5.4.5
      pullPolicy: IfNotPresent
    podSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
      runAsNonRoot: true
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: [ "ALL" ]
      readOnlyRootFilesystem: true
      runAsNonRoot: true
  webApi:
    image:
      repository: cryptlex/cryptlex-web-api-enterprise
      tag: 3.79.3
      pullPolicy: IfNotPresent
    podSecurityContext:
      runAsUser: 1654
      runAsGroup: 1654
      runAsNonRoot: true
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop: [ "ALL" ]
      readOnlyRootFilesystem: true
      runAsNonRoot: true
  releaseServer:
    image:
      repository: cryptlex/cryptlex-release-server
      tag: 3.2.6
      pullPolicy: IfNotPresent
  cache:
    external: false
    image:
      repository: redis
      tag: 7-alpine
      pullPolicy: IfNotPresent

# Database config
database:
  name: cryptlex
  user: postgres
  password: postgres

# RabbitMQ config
rabbitMq:
  username: rabbitmq-admin
  password: rabbitmq
  replicaCount: 1

# Filestore config
filestore:
  accessKey: minio
  secretKey: minio_secret
  port: 9000
  bucket: releases.mycompany.com
  region: us-east-1
  useSsl: false

# Dashboard config (deprecated)
dashboard:
  companyName: My Company
  companyWebsite: https://mycompany.com
  companyLogoUrl: https://mycompany.com/logo.png
  companyFaviconUrl: https://mycompany.com/favicon.ico
  googleAnalyticsKey: UA-XXXXXXXX-X

# GeoIP config
geoip:
  serverUrl:
  apiKey:

# ðŸ”¹ Web API application config
webApi:
  replicaCount: 1
  applicationName: MyCompany
  serverLicenseKey: PASTE_LICENSE_KEY
  databaseUrl: postgres://{user}:{password}@{hostname}:{port}/{database-name}
  databaseReaderUrl: ""
  databaseMaximumPoolSize: 300
  encryptionKey:
  rsaPassphrase: PASTE_RSA_SECRET
  maintenanceModeEnabled: false

  # New CORS section
  cors:
    allowedOrigins:
      - https://api.cryptlex.com
      - https://app-legacy.cryptlex.com
      - https://releases.cryptlex.com
      - https://app.cryptlex.com
      - https://*.customer.cryptlex.com
      - https://*.reseller.cryptlex.com

  ipRateLimitOptions:
    rateLimit: 50
    ipWhitelist: []
    realIpHeader:
  redis:
    url: ""
    enableSsl: false
    enableDatabaseCaching: false
  rabbitMq:
    url: ""
    username: ""
    password: ""
  email:
    fromAddress: support@mycompany.com
    fromName: MyCompany Support
    signature: <p>Thanks,<br>The MyCompany Team</p>
    smtp:
      host: ""
      port: 587
      enableSsl: true
      username: ""
      password: ""
    mailgun:
      apiKey: ""
      domain: ""
    sendgrid:
      apiKey: ""
  bugsnag:
    apiKey: ""
  newRelic:
    licenseKey: ""
    applicationName: "Cryptlex Web API"
  openTelemetry:
    otlpEndpoint: ""
    enableMetrics: true
    enableTraces: false
    otlpHeaders: []
  hangfireDashboard:
    username: ""
    password: ""
  maxmind:
    accountId: ""
    licenseKey: ""
  postmark:
    accountToken: ""
  google:
    recaptcha:
      secretKey: ""
    analytics:
      key: ""
    sso:
      clientId: ""
